import json

# Dicionários vazios para armazenar os dados dos diferentes módulos
estudantes = []
professores = []
disciplinas = []
turmas = []
matriculas = []

# Função para acesso ao menu principal
def menuPrincipal():
    print ('\n\n*** MENU PRINCIPAL ***\n'
           '\n(1) Gerenciar estudantes.'
           '\n(2) Gerenciar professores'
           '\n(3) Gerenciar disciplinas'
           '\n(4) Gerenciar turmas'
           '\n(5) Gerenciar matrículas'
           '\n(9) Sair \n')
    op = int(input('O que deseja? '))
    return op

# Função para acesso ao menu de operações
def menuOperacoes(opregistro):
    print("\n\n*** ["+opregistro+"] - MENU DE OPERAÇÕES ***\n"
          "\n(1) Incluir"
          "\n(2) Listar"
          "\n(3) Atualizar"
          "\n(4) Excluir"
          "\n(9) Voltar")
    escolha = int(input('O que fará? '))
    return escolha

# Função para incluir registros em qualquer módulo
def incluirRegistro(op):
    print ('\n\n--- INCLUIR ---\n')
    if op == 1:
        codigo = int(input('Qual o código do estudante? '))
        nome = input('Qual o nome do estudante? ')
        cpf = input('Qual o CPF do estudante? ')
        dic = {'codigo': codigo, 'nome': nome, 'cpf': cpf}
        # Verificar se o código já existe antes de incluir
        if not any(d['codigo'] == codigo for d in estudantes):
            estudantes.append(dic)
            salvarArquivo(estudantes, 'estudantes.json')
        else:
            print('Código já existe. Registro não adicionado.')
    elif op == 2:
        codigo = int(input('Qual o código do professor? '))
        nome = input('Qual o nome do professor? ')
        cpf = input('Qual o CPF do professor? ')
        dic = {'codigo': codigo, 'nome': nome, 'cpf': cpf}
        if not any(d['codigo'] == codigo for d in professores):
            professores.append(dic)
            salvarArquivo(professores, 'professores.json')
        else:
            print('Código já existe. Registro não adicionado.')
    elif op == 3:
        codigo = int(input('Qual o código da disciplina? '))
        nome = input('Qual o nome da disciplina? ')
        dic = {'codigo': codigo, 'nome': nome}
        if not any(d['codigo'] == codigo for d in disciplinas):
            disciplinas.append(dic)
            salvarArquivo(disciplinas, 'disciplinas.json')
        else:
            print('Código já existe. Registro não adicionado.')
    elif op == 4:
        codigo = int(input('Qual o código da turma? '))
        professor = int(input('Qual o código do professor? '))
        disciplina = int(input('Qual o código da disciplina? '))
        dic = {'codigo': codigo, 'professor': professor, 'disciplina': disciplina}
        if not any(d['codigo'] == codigo for d in turmas):
            turmas.append(dic)
            salvarArquivo(turmas, 'turmas.json')
        else:
            print('Código já existe. Registro não adicionado.')
    elif op == 5:
        codigo = int(input('Qual o código da turma? '))
        codigo_estudante = int(input('Qual o código do estudante? '))
        dic = {'codigo': codigo, 'codigo_estudante': codigo_estudante}
        if not any(d['codigo'] == codigo for d in matriculas):
            matriculas.append(dic)
            salvarArquivo(matriculas, 'matriculas.json')

    input('\nInclusão feita com sucesso!'
          '\nAperte ENTER para continuar.')

# Função para listar registros de qualquer módulo
def listarRegistro(op, dados):
    print(f'\n\n--- LISTAR {opregistro.upper()} ---\n')
    if len(dados) < 1:
        print(f'Não há registros de {opregistro.lower()}. \n')
    else:
        for data in dados:
            if 'cpf' in data:
                print(f"Código: {data['codigo']}, Nome: {data['nome']}, CPF: {data['cpf']}")
            else:
                print(f"Código: {data['codigo']}, Nome: {data['nome']}")
    input('\nAperte ENTER para continuar.')

# Função para atualizar registros em qualquer módulo
def atualizarRegistro(op, dados):
    print(f'\n\n--- ATUALIZAR {opregistro.upper()} ---\n')
    codigo = int(input(f'Qual o código que deseja atualizar em {opregistro.lower()}? '))
    achou = False
    for item in dados:
        if item['codigo'] == codigo:
            if 'cpf' in item:
                codigo = int(input(f'Qual o novo código do {opregistro.lower()}? '))
                nome = input(f'Qual o novo nome do {opregistro.lower()}? ')
                cpf = input(f'Qual o novo CPF do {opregistro.lower()}? ')
                item['codigo'] = codigo
                item['nome'] = nome
                item['cpf'] = cpf
            else:
                codigo = int(input(f'Qual o novo código do {opregistro.lower()}? '))
                nome = input(f'Qual o novo nome do {opregistro.lower()}? ')
                item['codigo'] = codigo
                item['nome'] = nome
            salvarArquivo(dados, f'{opregistro.lower()}.json')
            achou = True
            break
    if not achou:
        print(f'\nCódigo não encontrado em {opregistro.lower()}. Tente novamente.')
    else:
        input(f'\nCódigo atualizado com sucesso em {opregistro.lower()}!'
              '\nAperte ENTER para continuar.')

# Função para excluir registros de qualquer módulo
def excluirRegistro(op, dados):
    print(f'\n\n--- EXCLUIR {opregistro.upper()} ---')
    codigo = int(input(f'Qual o código que deseja excluir em {opregistro.lower()}? '))
    achou = False
    for item in dados:
        if item['codigo'] == codigo:
            dados.remove(item)
            salvarArquivo(dados, f'{opregistro.lower()}.json')
            achou = True
            break
    if not achou:
        print(f'\nCódigo não encontrado em {opregistro.lower()}. Tente novamente.')
    else:
        input(f'\nRegistro excluído com sucesso em {opregistro.lower()}!'
              '\nAperte ENTER para continuar.')

# Função para acessar dados dos registros
def dadosArquivo(arquivo):
    try:
        with open(arquivo, 'r') as reg:
            dados = json.load(reg)
    except FileNotFoundError:
        dados = []
    return dados

# Função para salvar dados dos registros
def salvarArquivo(dados, arquivo):
    with open(arquivo, 'w') as reg:
        json.dump(dados, reg)

# Início do programa
op = 1

while op != 9:
    op = menuPrincipal()
    opregistro = ""

    if op == 1:
        opregistro = "ESTUDANTES"
        dados = estudantes
        arquivo = 'estudantes.json'
    elif op == 2:
        opregistro = "PROFESSORES"
        dados = professores
        arquivo = 'professores.json'
    elif op == 3:
        opregistro = "DISCIPLINAS"
        dados = disciplinas
        arquivo = 'disciplinas.json'
    elif op == 4:
        opregistro = "TURMAS"
        dados = turmas
        arquivo = 'turmas.json'
    elif op == 5:
        opregistro = "MATRÍCULAS"
        dados = matriculas
        arquivo = 'matriculas.json'
    elif op == 9:
        break
    else:
        print("\nOpção inválida. Tente novamente.")
        continue

    escolha = 1

    while escolha != 9:
        escolha = menuOperacoes(opregistro)

        if escolha == 1:
            incluirRegistro(op)
        elif escolha == 2:
            listarRegistro(op, dados)
        elif escolha == 3:
            atualizarRegistro(op, dados)
        elif escolha == 4:
            excluirRegistro(op, dados)
        elif escolha == 9:
            op = 1
            continue
        else:
            print('\nOpção inválida. Tente novamente.')
            input('\nAperte ENTER para continuar.')

print('Finalizando programa...')
